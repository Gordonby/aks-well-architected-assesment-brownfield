name: Create AKS Environment and Evaluate

on:
  workflow_dispatch:
    inputs:
      DeployCluster:
        description: 'Deploy the AKS Cluster'
        type: boolean
        default: true
      RG:
        description: 'Resource Group Name'
        type: text
        default: 'AksBicepAcc-Ci-Brownfield'
        
permissions:
      id-token: write
      contents: read

jobs:
  SetupWF:
    runs-on: ubuntu-latest
    outputs:
      RG: "${{ github.event.inputs.RG }}"
    steps:
      - name: Reusable workflow
        run: |
          echo "Resuable workflows can't be directly passed ENV/INPUTS (yet)"
          echo "So we need this job to be able to access the value in env.RG"
          echo "see https://github.community/t/reusable-workflow-env-context-not-available-in-jobs-job-id-with/206111"
      - name: Param checking
        run: |
          echo "Deploy Cluster ${{github.event.inputs.DeployCluster}}"
  aks:
    needs: [SetupWF]
    uses: Azure/AKS-Construction/.github/workflows/AKSC_Deploy.yml@0.9.15
    if: ${{ github.event.inputs.DeployCluster == 'true' }}
    with:
      templateVersion: 0.9.15
      rg: ${{ needs.SetupWF.outputs.RG }}
      resourceName: brownfield
      templateParams: resourceName=brownfield AksPaidSkuForSLA=true SystemPoolType=Standard agentCountMax=20 custom_vnet=true enable_aad=true AksDisableLocalAccounts=true enableAzureRBAC=true adminPrincipalId=_USER_OBJECT_ID_ registries_sku=Premium acrPushRolePrincipalId=_USER_OBJECT_ID_ enableACRTrustPolicy=true omsagent=true retentionInDays=30 availabilityZones=["1","2","3"] appGWcount=2 appGWsku=WAF_v2 appGWmaxCount=10 keyVaultAksCSI=true keyVaultCreate=true keyVaultOfficerRolePrincipalId=_USER_OBJECT_ID_ acrUntaggedRetentionPolicyEnabled=true DefenderForContainers=true
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      USER_OBJECT_ID: ${{ secrets.USER_OBJECT_ID }}
  psrule:
    needs: [aks]
    runs-on: ubuntu-latest
    if: '!cancelled()'
    steps:
      - name: Az CLI login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true 
          
      - shell: pwsh
        name: Run PSRule
        run: |
          #Fill these out
          $sub="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          $rg="${{ github.event.inputs.RG }}"
          $tenantId="${{ secrets.AZURE_TENANT_ID }}"

          #Only change these if you really care
          $templatePath=".wellarchitected-output/templates/"

          # Install PSRule.Rules.Azure from the PowerShell Gallery
          Install-Module -Name 'PSRule.Rules.Azure' -Scope CurrentUser -Force;
          
          # Install Az from the PowerShell Gallery (To use PSRule for Azure export cmdlets please install Az.Resources.)
          Install-Module -Name Az -Repository PSGallery -Force

          # Export data from the resource group
          Export-AzRuleData -ResourceGroupName $rg -OutputPath $templatePath;

          # Check against Azure Rules
          $resultsFile = "psruleout.txt"
          $PSRuleResults = Invoke-PSRule -InputPath $templatePath -Module 'PSRule.Rules.Azure' -As Summary;
          $PSRuleResults | Out-File $resultsFile 
          Write-Output $PSRuleResults

          #Run a more detailed analysis
          Invoke-PSRule -InputPath $templatePath -Module 'PSRule.Rules.Azure' -As Detail;
          
      - name: Upload PSRule Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: PSRuleOut
          path: "psruleout.txt"
